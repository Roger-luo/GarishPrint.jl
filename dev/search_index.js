var documenterSearchIndex = {"docs":
[{"location":"advance/#Advanced-Usage","page":"Advanced Usage","title":"Advanced Usage","text":"","category":"section"},{"location":"ref/","page":"References","title":"References","text":"CurrentModule = GarishPrint","category":"page"},{"location":"ref/#Reference","page":"References","title":"Reference","text":"","category":"section"},{"location":"ref/","page":"References","title":"References","text":"Modules = [GarishPrint]","category":"page"},{"location":"ref/#GarishPrint.pprint-Tuple{IO, MIME, Any}","page":"References","title":"GarishPrint.pprint","text":"pprint(io::IO, mime::MIME, x; kw...)\n\nPretty print an object x with given MIME type.\n\nwarning: Warning\ncurrently only supports MIME\"text/plain\", the implementation of MIME\"text/html\" is coming soon. Please also feel free to file an issue if you have a desired format wants to support.\n\n\n\n\n\n","category":"method"},{"location":"ref/#GarishPrint.pprint-Tuple{IO, Vararg{Any, N} where N}","page":"References","title":"GarishPrint.pprint","text":"pprint([io::IO=stdout, ]xs...; kw...)\n\nPretty print given objects xs to io, default io is stdout.\n\nKeyword Arguments\n\nindent::Int: indent size, default is 2.\ncompact::Bool: whether print withint one line, default is get(io, :compact, false).\nwidth::Int: the width hint of printed string, note this is not stricted obeyed,\n\ndefault is displaysize(io)[2].\n\nshow_indent::Bool: whether print indentation hint, default is true.\ncolor::Bool: whether print with color, default is true.\n\nColor Preference\n\ncolor preference is available as keyword arguments to override the default color scheme. These arguments may take any of the values :normal, :default, :bold, :black, :blink, :blue, :cyan, :green, :hidden, :light_black, :light_blue, :light_cyan, :light_green, :light_magenta, :light_red, :light_yellow, :magenta, :nothing, :red, :reverse, :underline, :white, or :yellow or an integer between 0 and 255 inclusive. Note that not all terminals support 256 colors.\n\nThe default color scheme can be checked via GarishPrint.default_colors_256() for 256 color, and GarishPrint.default_colors_ansi() for ANSI color. The 256 color will be used when the terminal is detected to support 256 color.\n\nfieldname: field name of a struct.\ntype: the color of a type.\noperator: the color of an operator, e.g +, =>.\nliteral: the color of literals.\nconstant: the color of constants, e.g π.\nnumber: the color of numbers, e.g 1.2, 1.\nstring: the color of string.\ncomment: comments, e.g # some comments\nundef: the const binding to UndefInitializer\nlinenumber: line numbers.\n\nNotes\n\nThe color print and compact print can also be turned on/off by setting IOContext, e.g IOContext(io, :color=>false) will print without color, and IOContext(io, :compact=>true) will print within one line. This is also what the standard Julia IO objects follows in printing by default.\n\n\n\n\n\n","category":"method"},{"location":"#GarishPrint","page":"Home","title":"GarishPrint","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: CI) (Image: codecov) [![][docs-stable-img]][docs-stable-url] [![][docs-dev-img]][docs-dev-url]","category":"page"},{"location":"","page":"Home","title":"Home","text":"An opinioned pretty printing package for Julia objects.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<p> GarishPrint is a &nbsp;     <a href=\"https://julialang.org\">         <img src=\"https://raw.githubusercontent.com/JuliaLang/julia-logo-graphics/master/images/julia.ico\" width=\"16em\">         Julia Language     </a>     &nbsp; package. To install GarishPrint,     please <a href=\"https://docs.julialang.org/en/v1/manual/getting-started/\">open     Julia's interactive session (known as REPL)</a> and press <kbd>]</kbd> key in the REPL to use the package mode, then type the following command </p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add GarishPrint","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"there is only one function exported that is pprint, here is a quick example","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GarishPrint\n\nstruct ABC{T1, T2, T3}\n    hee::T1\n    haa::T2\n    hoo::T3\nend\n\nstruct Example{T1, T2}\n    field_a::T1\n    field_b::T2\n    abc::ABC\nend\n\nx = Example(\n    Dict(\n        \"a\"=>Example(\n            [1, 2, 3],\n            2.0,\n            ABC(1, 2.0im, 3.12f0),\n        ),\n        \"str\" => Set([1, 2, 3]),\n    ),\n    undef,\n    ABC(nothing, 1.2+2.1im, π),\n)\n\npprint(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"it will print the following","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: readme-example)","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MIT License","category":"page"},{"location":"","page":"Home","title":"Home","text":"[docs-dev-img]: https://img.shields.io/badge/docs-dev-blue.svg [docs-dev-url]: https://Roger-luo.github.io/GarishPrint.jl/dev/ [docs-stable-img]: https://img.shields.io/badge/docs-stable-blue.svg [docs-stable-url]: https://Roger-luo.github.io/GarishPrint.jl/stable","category":"page"}]
}
